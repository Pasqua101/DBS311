-- ********************************************************
-- Name: Marco Pasqua
-- StudID: 100497213
-- Date: Oct 11, 2022
-- Title: NII_week6.sql
-- Introduction to PL/SQL
-- ********************************************************
-- Topics: PL - Programming Language

SET SERVEROUTPUT ON; --Turning on server output so we can see what's happening on the server to see if we programmed it properly
-- Turns on manual output in the script window (must be executed everytime you open the application)


-- NON-SAVED PROCEDURES - 'Hello World'
BEGIN

    DBMS_OUTPUT.PUT_LINE('Hello World');

END;

-- parameters
DECLARE
    playerID INTEGER := 2; --We use ':=' to assign as value to a variable
    playerID2 INTEGER := 0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('--------------------- START ---------------------------'); -- This line of code is optional. but can be used to show when the code starts
    
    --Must use aa select statement if we want to pull a value from a table
    SELECT 4 INTO playerID2 FROM dual; -- We can use select to put a value into a variable. We could also use this 'playerID2 := 4;'. We use the dual table since it's just a default table
    DBMS_OUTPUT.PUT_LINE('The first playerID is: ' || playerID);
    DBMS_OUTPUT.PUT_LINE('The second playerID is: ' || playerID2);
    
    DBMS_OUTPUT.PUT_LINE('--------------------- END ---------------------------'); -- This line of code is optional. but can be used to show when the code ends
END;

-- let us do this with real tables now

DECLARE
    pID INTEGER := 1315; -- IN
    playerName VARCHAR2(60); -- OUT
    regNum NUMBER; -- OUT
BEGIN
    DBMS_OUTPUT.PUT_LINE('--------------------- START ---------------------------'); 
    
    SELECT
        firstname || ' ' || lastname,
        regNumber
    INTO
        playerName,
        regNum
    FROM players
    WHERE playerID = pID; --  NOTE this is a ONE row result
    
    DBMS_OUTPUT.PUT_LINE('PlayerID: ' || pID); 
    DBMS_OUTPUT.PUT_LINE('Player Name: ' || playerName);
    DBMS_OUTPUT.PUT_LINE('Registration Number ' || regNum);
    
    DBMS_OUTPUT.PUT_LINE('--------------------- END ---------------------------'); 

END;
-- NOTE this output returns a single line because there are single value variables

--Returning more than 1 row
DECLARE
    pID INTEGER := 1315; -- IN
    playerName VARCHAR2(60); -- OUT
    regNum NUMBER; -- OUT
BEGIN
    DBMS_OUTPUT.PUT_LINE('--------------------- START ---------------------------'); 
    
    SELECT
        firstname || ' ' || lastname,
        regNumber
    INTO
        playerName,
        regNum
    FROM players
    WHERE UPPER(firstName) = 'ROBERT'; -- NOTE: returns MORE than 1 row
    
    DBMS_OUTPUT.PUT_LINE('PlayerID: ' || pID); 
    DBMS_OUTPUT.PUT_LINE('Player Name: ' || playerName);
    DBMS_OUTPUT.PUT_LINE('Registration Number ' || regNum);
    
    DBMS_OUTPUT.PUT_LINE('--------------------- END ---------------------------'); 

END;

-- causes an error that will potentially crash software

-- let us handle the errors here, so that we can send intelligent, messages or code to the software

DECLARE
    pID INTEGER := 1315; -- IN
    playerName VARCHAR2(60); -- OUT
    regNum NUMBER; -- OUT
BEGIN
    DBMS_OUTPUT.PUT_LINE('--------------------- START ---------------------------'); 
    
    SELECT
        firstname || ' ' || lastname,
        regNumber
    INTO
        playerName,
        regNum
    FROM players
    WHERE UPPER(firstName) = 'ROBERT'; -- NOTE: returns MORE than 1 row
    
    DBMS_OUTPUT.PUT_LINE('PlayerID: ' || pID); 
    DBMS_OUTPUT.PUT_LINE('Player Name: ' || playerName);
    DBMS_OUTPUT.PUT_LINE('Registration Number ' || regNum);
    
    DBMS_OUTPUT.PUT_LINE('--------------------- END ---------------------------'); 
    
EXCEPTION
    WHEN TOO_MANY_ROWS
        THEN     DBMS_OUTPUT.PUT_LINE('ERROR: Too many rows returned'); 
    WHEN OTHERS --OTHERS is an else statement, when can be used as many times as we want
        THEN DBMS_OUTPUT.PUT_LINE('ERROR: An error occured!'); 

END;


-- let us create our first SAVED procedure
-- SP's Saved Procedure OR stored Procedure

CREATE OR REPLACE PROCEDURE spHelloWorld AS 
    myName VARCHAR(25) := 'Marco Pasqua';
BEGIN
    DBMS_OUTPUT.PUT_LINE('--------------------- START ---------------------------'); 
    DBMS_OUTPUT.PUT_LINE('Hello World, my name is ' || myName); 
    DBMS_OUTPUT.PUT_LINE('--------------------- END ---------------------------'); 
END;

-- now to execute it any time I want to ....
BEGIN 
    spHelloWorld();
END;

-- Let us try this with basic CRUD statements

-- to demo this we will use a temporary table
CREATE TABLE xPeople (
    pID INT GENERATED BY DEFAULT ON NULL AS IDENTITY /*equivalent of a auto number field*/ PRIMARY KEY,
    firstName VARCHAR(25) NOT NULL,
    lastName VARCHAR(25) NOT NULL,
    DOB DATE,
    isActive NUMERIC(1) DEFAULT 1 NOT NULL,
    favNum INT CHECK (favNum BETWEEN 0 AND 99)
);

CREATE OR REPLACE PROCEDURE spInsertPeople (
    firstName VARCHAR2,
    lastName VARCHAR2, -- we do not need to declare the size, just data type
    DOB DATE,
    isActive NUMERIC,
    favNum INT 
    ) AS 
    newPID INT := 0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('--------------------- START ---------------------------'); 
    INSERT INTO xPeople
    VALUES (null, fName, lName, DOB, isActive, favNum); -- parameter names, not column names
    
    DBMS_OUTPUT.PUT_LINE('--------------------- END ---------------------------'); 
EXCEPTION
    WHEN OTHERS
        THEN
            DBMS_OUTPUT.PUT_LINE('Insert failed, an error occured!'); 
END;


